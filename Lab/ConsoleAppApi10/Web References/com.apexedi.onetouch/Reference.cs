//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ConsoleAppApi10.com.apexedi.onetouch {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ApexEligibilityAPISoap", Namespace="http://tempuri.org/")]
    public partial class ApexEligibilityAPI : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEligibilityPayersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitEligibilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEligibilityResponseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ApexEligibilityAPI() {
            this.Url = global::ConsoleAppApi10.Properties.Settings.Default.ConsoleAppApi10_com_apexedi_onetouch_ApexEligibilityAPI;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetProvidersCompletedEventHandler GetProvidersCompleted;
        
        /// <remarks/>
        public event GetEligibilityPayersCompletedEventHandler GetEligibilityPayersCompleted;
        
        /// <remarks/>
        public event SubmitEligibilityCompletedEventHandler SubmitEligibilityCompleted;
        
        /// <remarks/>
        public event GetEligibilityResponseCompletedEventHandler GetEligibilityResponseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProviders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetProviders(string username, string password) {
            object[] results = this.Invoke("GetProviders", new object[] {
                        username,
                        password});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetProvidersAsync(string username, string password) {
            this.GetProvidersAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetProvidersAsync(string username, string password, object userState) {
            if ((this.GetProvidersOperationCompleted == null)) {
                this.GetProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProvidersOperationCompleted);
            }
            this.InvokeAsync("GetProviders", new object[] {
                        username,
                        password}, this.GetProvidersOperationCompleted, userState);
        }
        
        private void OnGetProvidersOperationCompleted(object arg) {
            if ((this.GetProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProvidersCompleted(this, new GetProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEligibilityPayers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetEligibilityPayers(string username, string password) {
            object[] results = this.Invoke("GetEligibilityPayers", new object[] {
                        username,
                        password});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetEligibilityPayersAsync(string username, string password) {
            this.GetEligibilityPayersAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetEligibilityPayersAsync(string username, string password, object userState) {
            if ((this.GetEligibilityPayersOperationCompleted == null)) {
                this.GetEligibilityPayersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEligibilityPayersOperationCompleted);
            }
            this.InvokeAsync("GetEligibilityPayers", new object[] {
                        username,
                        password}, this.GetEligibilityPayersOperationCompleted, userState);
        }
        
        private void OnGetEligibilityPayersOperationCompleted(object arg) {
            if ((this.GetEligibilityPayersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEligibilityPayersCompleted(this, new GetEligibilityPayersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitEligibility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SubmitEligibility(string username, string password, int providerID, int payerID, string eqCode, string subscriberID, string subscriberFirstName, string subscriberLastName, string subscriberDateOfBirth, bool subscriberIsMale, bool isInNetwork, string dependentFirstName, string dependentLastName, string dependentDateOfBirth, bool dependentIsMale) {
            object[] results = this.Invoke("SubmitEligibility", new object[] {
                        username,
                        password,
                        providerID,
                        payerID,
                        eqCode,
                        subscriberID,
                        subscriberFirstName,
                        subscriberLastName,
                        subscriberDateOfBirth,
                        subscriberIsMale,
                        isInNetwork,
                        dependentFirstName,
                        dependentLastName,
                        dependentDateOfBirth,
                        dependentIsMale});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitEligibilityAsync(string username, string password, int providerID, int payerID, string eqCode, string subscriberID, string subscriberFirstName, string subscriberLastName, string subscriberDateOfBirth, bool subscriberIsMale, bool isInNetwork, string dependentFirstName, string dependentLastName, string dependentDateOfBirth, bool dependentIsMale) {
            this.SubmitEligibilityAsync(username, password, providerID, payerID, eqCode, subscriberID, subscriberFirstName, subscriberLastName, subscriberDateOfBirth, subscriberIsMale, isInNetwork, dependentFirstName, dependentLastName, dependentDateOfBirth, dependentIsMale, null);
        }
        
        /// <remarks/>
        public void SubmitEligibilityAsync(
                    string username, 
                    string password, 
                    int providerID, 
                    int payerID, 
                    string eqCode, 
                    string subscriberID, 
                    string subscriberFirstName, 
                    string subscriberLastName, 
                    string subscriberDateOfBirth, 
                    bool subscriberIsMale, 
                    bool isInNetwork, 
                    string dependentFirstName, 
                    string dependentLastName, 
                    string dependentDateOfBirth, 
                    bool dependentIsMale, 
                    object userState) {
            if ((this.SubmitEligibilityOperationCompleted == null)) {
                this.SubmitEligibilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitEligibilityOperationCompleted);
            }
            this.InvokeAsync("SubmitEligibility", new object[] {
                        username,
                        password,
                        providerID,
                        payerID,
                        eqCode,
                        subscriberID,
                        subscriberFirstName,
                        subscriberLastName,
                        subscriberDateOfBirth,
                        subscriberIsMale,
                        isInNetwork,
                        dependentFirstName,
                        dependentLastName,
                        dependentDateOfBirth,
                        dependentIsMale}, this.SubmitEligibilityOperationCompleted, userState);
        }
        
        private void OnSubmitEligibilityOperationCompleted(object arg) {
            if ((this.SubmitEligibilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitEligibilityCompleted(this, new SubmitEligibilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEligibilityResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEligibilityResponse(string username, string password, int functionalGroupEligibilityID, bool return271Response) {
            object[] results = this.Invoke("GetEligibilityResponse", new object[] {
                        username,
                        password,
                        functionalGroupEligibilityID,
                        return271Response});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEligibilityResponseAsync(string username, string password, int functionalGroupEligibilityID, bool return271Response) {
            this.GetEligibilityResponseAsync(username, password, functionalGroupEligibilityID, return271Response, null);
        }
        
        /// <remarks/>
        public void GetEligibilityResponseAsync(string username, string password, int functionalGroupEligibilityID, bool return271Response, object userState) {
            if ((this.GetEligibilityResponseOperationCompleted == null)) {
                this.GetEligibilityResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEligibilityResponseOperationCompleted);
            }
            this.InvokeAsync("GetEligibilityResponse", new object[] {
                        username,
                        password,
                        functionalGroupEligibilityID,
                        return271Response}, this.GetEligibilityResponseOperationCompleted, userState);
        }
        
        private void OnGetEligibilityResponseOperationCompleted(object arg) {
            if ((this.GetEligibilityResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEligibilityResponseCompleted(this, new GetEligibilityResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetProvidersCompletedEventHandler(object sender, GetProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetEligibilityPayersCompletedEventHandler(object sender, GetEligibilityPayersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEligibilityPayersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEligibilityPayersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SubmitEligibilityCompletedEventHandler(object sender, SubmitEligibilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitEligibilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitEligibilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetEligibilityResponseCompletedEventHandler(object sender, GetEligibilityResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEligibilityResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEligibilityResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591